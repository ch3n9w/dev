#!/usr/bin/env zunit


@setup {
    TEST_VIRTUALENV="$HOME/.virtualenvs/foobar/"
    PYTHON_VERSION="$(python3 --version 2>&1)"

    if [[ ! -d "$TEST_VIRTUALENV" ]]; then
        printf "Creating test virtualenv: %s" % "$PYTHON_VERSION"
        run python -m virtualenv "$TEST_VIRTUALENV" --python=python3
    fi

    unset AUTOSWITCH_MESSAGE_FORMAT

    export DISABLE_AUTOSWITCH_VENV="1"
    load "../autoswitch_virtualenv.plugin.zsh"
    TARGET="$(mktemp -d)"

    LANG=".UTF-8"
}

@teardown {
    rm -rf "$TARGET"
}

@test '_maybeworkon - do not activate paths which are potentially insecure' {
    VIRTUAL_ENV=""

    run _maybeworkon "$TARGET/../../../" virtualenv

    assert $state equals 0

    # first line would be the "switching virtualenv: ...."
    assert "${lines[2]}" same_as "AUTOSWITCH WARNING: target virtualenv contains invalid characters"
    assert "${lines[3]}" same_as "virtualenv activation cancelled"
}

@test '_maybeworkon - error message if virtualenv can not be found' {
    VIRTUAL_ENV=""

    run _maybeworkon $HOME/.virtualenvs/idontexist virtualenv

    assert $state equals 0
    assert "${lines[1]}" same_as "Unable to find \e[35midontexist\e[0m virtualenv"
    assert "${lines[2]}" same_as "If the issue persists run \e[35mrmvenv && mkvenv\e[0m in this directory"
}


@test '_maybeworkon - switches virtualenv if nothing is activated' {
    VIRTUAL_ENV=""

    run _maybeworkon "$TEST_VIRTUALENV" virtualenv

    assert $state equals 0
    assert "$output" same_as "Switching virtualenv: \e[1m\e[35mfoobar\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}

@test '_maybeworkon - custom message' {
    VIRTUAL_ENV=""
    AUTOSWITCH_MESSAGE_FORMAT="Hello %venv_type - this is %venv_name (%py_version)"

    run _maybeworkon "$TEST_VIRTUALENV" cheese

    assert $state equals 0
    assert "$output" same_as "Hello cheese - this is foobar ($PYTHON_VERSION)"
}

@test '_maybeworkon - no emoji on non utf-8 LANG' {
    VIRTUAL_ENV=""
    LANG="ASCII"

    run _maybeworkon "$TEST_VIRTUALENV" virtualenv

    assert $state equals 0
    assert "$output" same_as "Switching virtualenv: \e[1m\e[35mfoobar\e[0m \e[32m[$PYTHON_VERSION]\e[0m"
}

@test '_maybeworkon - switches virtualenv if current virtualenv is different' {
    VIRTUAL_ENV="$HOME/.virtualenvs/default_venv"

    run _maybeworkon "$TEST_VIRTUALENV" virtualfoo

    assert $state equals 0
    assert "$output" contains "Switching virtualfoo: \e[1m\e[35mfoobar\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}

@test '_maybeworkon - switches virtualenv if current virtualenv is different (silent)' {
    VIRTUAL_ENV="$HOME/.virtualenvs/default_venv"
    AUTOSWITCH_SILENT="1"

    run _maybeworkon "$TEST_VIRTUALENV" virtualenv

    assert $state equals 0
    assert "$output" is_empty
}

@test '_maybeworkon - does not switch to already activated virtualenv' {
    VIRTUAL_ENV="$HOME/.virtualenvs/bwaaah"

    run _maybeworkon bwaaah virtualenv

    assert $state equals 0
    assert "$output" is_empty
}

@test '_maybeworkon - pipenv name cleaned' [
    run _maybeworkon hello-world-foo-de31f pipenv

    assert $state equals 0
    assert "$output" same_as "Switching pipenv: \e[1m\e[35mhello-world-foo\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}
