# interpreter for shell commands
set shell zsh
set period 1
set mouse true
set icons true
set info size
set dircounts
set ratios 1:1
set previewer ~/.config/lf/preview.sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set cursorpreviewfmt "\033[7;1m"
set cursoractivefmt "\033[7;1m"
set dupfilefmt "%f.%n"

%mkdir -p ~/.trash

cmd open &{{
  filetype=$(file --mime-type -b $f)
  fork_types=("image" "application/pdf")
  fork_needed=false
  for type in "${fork_types[@]}"; do
    if [[ $filetype == $type* ]]; then
      fork_needed=true
      break
    fi
  done
  if $fork_needed; then
    exec ~/.config/lf/open $fx 
  else
    lf -remote "send $id \$~/.config/lf/open \$fx"
  fi
}}

cmd open-with ${{
    clear
    set -f
    rifle -l $fx | sed -e "s/:[a-Z]*:[a-Z]*:/ \| /"
    read -p "open with: " method
    rifle -p $method $fx
}}

cmd trash &{{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}
    rm -rf ~/.trash/"$(basename "$file")"
    mv $file ~/.trash
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd delete &{{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}
    rm -rf $file
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd fzf_select ${{
    res="$(fd --exclude={.wine,.git,.idea,.vscode,.sass-cache,node_modules,build,.local,.steam,.m2,.rangerdir,.ssh,.ghidra,.mozilla,.cache} --follow | fzf --height=100% --layout=reverse --preview='~/.config/lf/fzf-scope.sh {} || tree -ahpCL 3 -I .git -I __pycache__')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

map <enter> shell
map gh cd ~
map gd cd ~/Documents
map gn cd ~/Downloads
map gp cd ~/Projects
map H jump-prev
map L jump-next

map a :push %mkdir<space>
map t :push %touch<space>
map r rename
map o open-with

map . set hidden!
map ; shell

map y copy
map d cut
map p paste
map D trash
map <delete> delete

map f fzf_select
